{"version":3,"file":"static/js/362.ca66cabb.chunk.js","mappings":"uQAKaA,EAAU,mCAAG,WAAMC,GAAN,gFAClBC,EADkB,UAFT,+BAES,kBACSD,EADT,4BAHV,oCAGU,SAGDE,EAAAA,EAAAA,IAAUD,GAHT,cAGlBE,EAHkB,yBAKjBA,EAASC,KAAKC,SALG,2CAAH,sD,mBCHVC,EAAgBC,EAAAA,GAAAA,GAAH,0CAIbC,EAAaD,EAAAA,GAAAA,GAAH,gDAGVE,EAAWF,EAAAA,GAAAA,GAAH,sCAGRG,EAAcH,EAAAA,GAAAA,EAAH,iEAIXI,EAAUJ,EAAAA,GAAAA,EAAH,sB,SCsCpB,EA3CgB,WACd,OAAkCK,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,MAAjD,eAAOG,EAAP,KAAqBC,EAArB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,YACR,iBAAC,6GAEsBpB,EAAWkB,GAFjC,UAIuB,KAFdb,EAFT,QAIYgB,OAJZ,uBAKKJ,EAAgB,uCALrB,0BAQKF,EAAaV,GARlB,0DAWGY,EAAgB,+CAXnB,yDAAD,EAcD,GAAE,CAACC,KAGF,gCACiB,IAAdJ,IACC,SAACP,EAAD,UACGO,EAAUQ,KAAI,gBAAGrB,EAAH,EAAGA,GAAIsB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,WAAxB,OACb,UAAChB,EAAD,YACE,UAACC,EAAD,uBAAoBa,MACpB,SAACZ,EAAD,UACGc,EAAWC,MAAM,EAAG,GAAGC,MAAM,KAAKC,UAAUC,KAAK,QAEpD,SAACjB,EAAD,UAAUY,MALKvB,EADJ,MAWlBe,IAAgB,wBAAKA,MAG3B,C","sources":["servises/Api/GetReviews.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'dcb571cd23b92080c89a6cccb7d6e9ea';\nconst MAIN_URL = 'https://api.themoviedb.org/3';\n\nexport const GetReviews = async id => {\n  const URL = `${MAIN_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n\n  const response = await axios.get(URL);\n\n  return response.data.results;\n};\n\nexport default GetReviews;\n","import styled from 'styled-components';\n\nexport const ReviewWrapper = styled.ul`\n  padding: 15px;\n`;\n\nexport const ReviewItem = styled.li`\n  margin-bottom: 15px;\n`;\nexport const Reviewer = styled.h3`\n  margin: 0;\n`;\nexport const CreatedDate = styled.p`\n  margin-top: 0;\n  margin-bottom: 8px;\n`;\nexport const Content = styled.p``;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { GetReviews } from '../../servises/Api/GetReviews';\nimport {\n  ReviewWrapper,\n  ReviewItem,\n  Reviewer,\n  CreatedDate,\n  Content,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviewArr, setReviewArr] = useState([]);\n  const [errorMassege, setErrorMassege] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = await GetReviews(movieId);\n\n        if (data.length === 0) {\n          setErrorMassege('There is no reviews for this movie.');\n          return;\n        } else {\n          setReviewArr(data);\n        }\n      } catch {\n        setErrorMassege('Error loading info. Please reload the page.');\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviewArr !== 0 && (\n        <ReviewWrapper>\n          {reviewArr.map(({ id, author, content, created_at }) => (\n            <ReviewItem key={id}>\n              <Reviewer>Aauthor: {author}</Reviewer>\n              <CreatedDate>\n                {created_at.slice(0, 9).split('-').reverse().join('-')}\n              </CreatedDate>\n              <Content>{content}</Content>\n            </ReviewItem>\n          ))}\n        </ReviewWrapper>\n      )}\n      {errorMassege && <h2>{errorMassege}</h2>}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["GetReviews","id","URL","axios","response","data","results","ReviewWrapper","styled","ReviewItem","Reviewer","CreatedDate","Content","useState","reviewArr","setReviewArr","errorMassege","setErrorMassege","movieId","useParams","useEffect","length","map","author","content","created_at","slice","split","reverse","join"],"sourceRoot":""}